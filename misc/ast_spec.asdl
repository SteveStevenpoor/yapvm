module yapvm {
    mod = Module(stmt *body)

    stmt = 
        Import(
            identifer name
        )
        |
        FunctionDef(
            identifier name,
            identifier *args,
            stmt *body,
            expr? returns
        )
        | ClassDef(
            identifier name, 
            stmt *body
        )
        | Return(
            expr? value
        )
        | Assign(
            expr target, 
            expr value
        )
        | AugAssign(
            expr target,
            operator op,
            expr value
        ) 
        | While(
            expr test,
            stmt *body
        )
        | If(
            expr test,
            stmt *body,
            stmt *orelse
        )
        | Expr(
            expr value
        ) 
        | Pass
        | Break
        | Continue

    expr = 
        BoolOp(
            boolop op, 
            expr *values
        )
        | BinOp(
            expr left, 
            operator op,
            expr right
        )
        | UnaryOp(
            unaryop op,
            expr operand
        )
        | Compare(
            expr left,
            cmpop *ops,
            expr *comparators
        )
        | Call(
            expr func,
            expr *args
        )
        | Constant(
            constant value
        )
        | Attribute(
            expr value, 
            identifier attr
        )
        | Subscript(
            expr value,
            expr key
        )
        | Name(
            identifier id
        )
        | List
        | Dict

    boolop = 
        And | Or
    
    operator = 
        Add | Sub | Mult | Div | Mod | Pow 
        | LShift | RShift | BitOr | BitXor | BitAnd | FloorDiv

    unaryop = 
        Invert | Not

    cmpop = 
        Eq | NotEq | Lt | LtE | Gt | GtE 
}
